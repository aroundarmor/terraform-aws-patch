name: 'Terraform'

on:
  workflow_dispatch:
    inputs:
      aws-account-id:
        description: 'AWS Account ID'
        required: true
      aws-region:
        description: 'AWS Region'
        required: false
        default: 'us-east-1'

permissions:
  contents: read

jobs:
  install-aws-cli:
    name: 'Install AWS CLI'
    runs-on: ubuntu-latest

    steps:
      # Install AWS CLI
      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      # Set up AWS CLI with repository secrets of AccountA
      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Check if S3 Bucket exists and create if not
      - name: Check S3 Bucket Existence
        run: |
          if aws s3api head-bucket --bucket ollion-patching-terraform-state-in-${{ github.event.inputs.aws-region }}-and-${{ github.event.inputs.aws-account-id }} 2>/dev/null; then
            echo "Bucket already exists."
          else
            echo "Bucket does not exist. Creating..."
            aws s3api create-bucket --bucket ollion-patching-terraform-state-in-${{ github.event.inputs.aws-region }}-and-${{ github.event.inputs.aws-account-id }} --region ${{ github.event.inputs.aws-region }}
            aws s3api wait bucket-exists --bucket ollion-patching-terraform-state-in-${{ github.event.inputs.aws-region }}-and-${{ github.event.inputs.aws-account-id }}
          fi

  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    needs: install-aws-cli  # Ensure that the install-aws-cli job is completed before starting this job

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Set AWS region
      - name: Set AWS Region
        run: aws configure set region ${{ github.event.inputs.aws-region }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        run: |
          terraform apply -auto-approve tfplan
